{{ .Header }}

{{ .GenStatement }}

package {{ .APIVersion }}

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
	{{ .Imports }}
)
{{ range .Resources }}
    // GetTerraformResourceType returns Terraform resource type for this {{ .CRD.Kind }}
    func (mg *{{ .CRD.Kind }}) GetTerraformResourceType() string {
        return "{{ .Terraform.ResourceType }}"
    }

    // GetConnectionDetailsMapping for this {{ .CRD.Kind }}
    func (tr *{{ .CRD.Kind }}) GetConnectionDetailsMapping() map[string]string {
      {{- if .Sensitive.Fields }}
      return map[string]string{ {{range $k, $v := .Sensitive.Fields}}"{{ $k }}": "{{ $v}}", {{end}} }
      {{- else }}
      return nil
      {{- end }}
    }

    // GetObservation of this {{ .CRD.Kind }}
    func (tr *{{ .CRD.Kind }}) GetObservation() (map[string]any, error) {
        o, err := json.TFParser.Marshal(tr.Status.AtProvider)
        if err != nil {
            return nil, err
        }
        base := map[string]any{}
        return base, json.TFParser.Unmarshal(o, &base)
    }

    // SetObservation for this {{ .CRD.Kind }}
    func (tr *{{ .CRD.Kind }}) SetObservation(obs map[string]any) error {
        p, err := json.TFParser.Marshal(obs)
        if err != nil {
            return err
        }
        return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
    }

    // GetID returns ID of underlying Terraform resource of this {{ .CRD.Kind }}
    func (tr *{{ .CRD.Kind }}) GetID() string {
        if tr.Status.AtProvider.ID == nil {
            return ""
        }
        return *tr.Status.AtProvider.ID
    }

    // GetParameters of this {{ .CRD.Kind }}
    func (tr *{{ .CRD.Kind }}) GetParameters() (map[string]any, error) {
        p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
        if err != nil {
            return nil, err
        }
        base := map[string]any{}
        return base, json.TFParser.Unmarshal(p, &base)
    }

    // SetParameters for this {{ .CRD.Kind }}
    func (tr *{{ .CRD.Kind }}) SetParameters(params map[string]any) error {
        p, err := json.TFParser.Marshal(params)
        if err != nil {
            return err
        }
        return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
    }

    // LateInitialize this {{ .CRD.Kind }} using its observed tfState.
    // returns True if there are any spec changes for the resource.
    func (tr *{{ .CRD.Kind }}) LateInitialize(attrs []byte) (bool, error) {
        params := &{{ .CRD.ParametersTypeName }}{}
        if err := json.TFParser.Unmarshal(attrs, params); err != nil {
            return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
        }
        opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}
        {{ range .LateInitializer.IgnoredFields -}}
            opts = append(opts, resource.WithNameFilter("{{ . }}"))
        {{ end }}

        li := resource.NewGenericLateInitializer(opts...)
        return li.LateInitialize(&tr.Spec.ForProvider, params)
    }

    // GetTerraformSchemaVersion returns the associated Terraform schema version
    func (tr *{{ .CRD.Kind }}) GetTerraformSchemaVersion() int {
        return {{ .Terraform.SchemaVersion }}
    }
{{ end }}
